/*
 *     Generated by class-dump 3.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2005 by Steve Nygard.
 */

struct CGContext;

struct OpaqueATSUStyle;

struct OpaqueATSUTextLayout;

struct _DNSServiceRef_t;


struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    void *_field9;
    void *_field10;
    void *_field11;
    void *_field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sFILEX;

struct __sbuf {
    char *_base;
    int _size;
};

struct _flags {
    unsigned int type:2;
    unsigned int wraps:1;
    unsigned int nonASCII:1;
    unsigned int retainCount:12;
};

struct _vt100flags {
    unsigned char gn[4];
    unsigned int keypad:1;
    unsigned int repeat:1;
    unsigned int newLine:1;
    unsigned int origin:1;
    unsigned int appkeypad:1;
    unsigned int cursorkey:1;
    unsigned int sizeSwitch_80_132:1;
    unsigned int X11MouseReporting:1;
    unsigned int charset:2;
    unsigned int insertMode:1;
    unsigned int cursorHidden:1;
    unsigned int invertedVideo:1;
};

struct _vt52flags {
    unsigned int wrap:1;
    unsigned int inEscape:1;
    unsigned int appkeypad:1;
    unsigned int graphics:1;
};

struct timeval {
    int tv_sec;
    int tv_usec;
};

struct utmpx {
    char ut_user[32];
    char ut_id[4];
    char ut_line[32];
    int ut_pid;
    short ut_type;
    struct timeval ut_tv;
    char ut_host[256];
    unsigned int ut_pad[16];
};

typedef struct {
    struct _NSRange _field1;
    union {
        int _field1;
        struct {
            unsigned int tvInverse:1;
            unsigned int tvBold:1;
            unsigned int tvUnderline:1;
            unsigned int tvBlink:1;
            unsigned int tvConcealed:1;
            unsigned int tvCustomSymbol:5;
            unsigned int tvBGColorIndex:5;
            unsigned int tvFGColorIndex:5;
            unsigned int tvCustomUnderline:2;
        } _field2;
    } _field2;
    id _field3;
} CDAnonymousStruct1;

typedef struct {
    unsigned int line;
    unsigned short off;
} CDAnonymousStruct2;

typedef struct {
    unsigned short _field1;
    unsigned short _field2;
} CDAnonymousStruct3;

typedef struct {
    float _field1;
    float _field2;
} CDAnonymousStruct4;

typedef union {
    int all;
    struct {
        unsigned int tvInverse:1;
        unsigned int tvBold:1;
        unsigned int tvUnderline:1;
        unsigned int tvBlink:1;
        unsigned int tvConcealed:1;
        unsigned int tvCustomSymbol:5;
        unsigned int tvBGColorIndex:5;
        unsigned int tvFGColorIndex:5;
        unsigned int tvCustomUnderline:2;
    } each;
} CDAnonymousUnion1;

/*
 * File: /Applications/Utilities/Terminal.app/Contents/MacOS/Terminal
 * Arch: Intel 80x86 (i386)
 */

@protocol NSTextInput
- (void)insertText:(id)fp8;
- (void)doCommandBySelector:(SEL)fp8;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)unmarkText;
- (BOOL)hasMarkedText;
- (long)conversationIdentifier;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (id)validAttributesForMarkedText;
@end

@interface NSColor (Terminal)
+ (id)vtBlackColor;
+ (id)vtRedColor;
+ (id)vtGreenColor;
+ (id)vtYellowColor;
+ (id)vtBlueColor;
+ (id)vtMagentaColor;
+ (id)vtCyanColor;
+ (id)vtWhiteColor;
+ (id)vtBrightBlackColor;
+ (id)vtBrightRedColor;
+ (id)vtBrightGreenColor;
+ (id)vtBrightYellowColor;
+ (id)vtBrightBlueColor;
+ (id)vtBrightMagentaColor;
+ (id)vtBrightCyanColor;
+ (id)vtBrightWhiteColor;
@end

@interface NSString (Terminal)
- (id)escapedFilename;
- (id)arguments;
- (id)string;
@end

@interface CommandPanel : NSObject
{
    NSComboBox *commandCombo;
    NSButton *runInShellCheckBox;
    NSMutableArray *commandHistory;
}

- (void)showPanel;
- (void)dealloc;
- (void)commandEntered:(id)fp8;
- (int)numberOfItemsInComboBox:(id)fp8;
- (id)comboBox:(id)fp8 objectValueForItemAtIndex:(int)fp12;
- (unsigned int)comboBox:(id)fp8 indexOfItemWithStringValue:(id)fp12;

@end

@interface FindPanel : NSWindowController
{
    NSTextField *messageTextField;
    NSTextField *findTextField;
    NSButton *nextButton;
    NSButton *prevButton;
    NSButton *ignoreCaseCheckBox;
}

+ (id)sharedFindPanel;
- (id)init;
- (void)dealloc;
- (void)windowDidLoad;
- (void)applicationWillBecomeActiveNotification:(id)fp8;
- (void)enterSelection:(id)fp8;
- (void)findNext:(id)fp8;
- (void)findPrevious:(id)fp8;
- (void)importFindText:(id)fp8;
- (void)exportFindText:(id)fp8;
- (void)performFindNext;
- (void)performFindPrevious;
- (void)showWindow:(id)fp8;

@end

@interface Shell : NSObject
{
    TermController *controller;
    NSMutableArray *processNames;
    NSString *foregroundProcessName;
    NSString *shellCommand;
    Pty *ptyObj;
    NSMutableArray *writeQueue;
    NSString *springLoadedPaste;
    int _fd;
    int pid;
    int shellpid;
    int shellppid;
    int loginpid;
    int ttyDevice;
    char pty[11];
    NSMutableData *inputBuffer;
    int iso2022jpCSState;
    struct utmpx utmpx;
    BOOL usinglogin;
}

+ (void)initialize;
+ (void)handleSignalNotification:(id)fp8;
+ (id)pathForExecutable:(id)fp8;
- (id)initWithTermController:(id)fp8;
- (void)dealloc;
- (void)invalidate;
- (BOOL)invalid;
- (int)pid;
- (int)fd;
- (char *)pty;
- (int)ttyDevice;
- (int)slaveMinorDevice;
- (id)shellCommand;
- (BOOL)isDirty;
- (id)processNames;
- (id)foregroundProcessName;
- (void)sizeShellToRows:(unsigned short)fp8 columns:(unsigned short)fp12 width:(float)fp16 height:(float)fp20;
- (id)_utf8ValidateData:(id)fp8 pushBack:(BOOL)fp12;
- (id)_iso2022jpValidateData:(id)fp8 pushBack:(BOOL)fp12;
- (id)_validateData:(id)fp8 pushBack:(BOOL)fp12 encoding:(unsigned int)fp16;
- (void)_flushInputBuffer;
- (id)_properlySplitData:(id)fp8;
- (void)processReadData:(id)fp8;
- (void)writeString:(id)fp8;

@end

@interface TerminalApp : NSApplication
{
    NSBox *saveAccessory;
    NSButton *autoOpenBox;
    NSPopUpButton *saveHowMany;
    NSTextField *executionString;
    NSMatrix *loginOrExecuteMatrix;
    NSButton *inAShellButton;
    NSBox *fontAccessory;
    NSSlider *fontWSlider;
    NSSlider *fontHSlider;
    NSPanel *quitPanel;
    NSButton *okButton;
    NSButton *cancelButton;
    NSMutableArray *dirtyTermControllers;
    CommandPanel *newCommand;
    BOOL ignoreStartupAction;
    BOOL illegalShell;
    NSMenu *libraryMenu;
    NSMenu *dockLibraryMenu;
    NSDate *libraryMenuTime;
    NSString *libraryDir;
    NSMenuItem *libraryItem;
    NSMenuItem *dockLibraryItem;
    NSMenuItem *sendBreakMenuItem;
    NSMenu *dockMenu;
    BOOL secureKeyboardEntry;
    BOOL secureKeyboardEntryAllowed;
    BOOL secureKeyboardEntryOn;
    NSMenuItem *secureKeyboardMenuItem;
    int bellCount;
    NSData *bellData;
    NSMutableArray *windowsMenuArray;
    NSString *emptySpot;
}

- (id)init;
- (void)awakeFromNib;
- (BOOL)rootVolumeIsReadOnly;
- (BOOL)runningFromCD;
- (void)applicationWillFinishLaunching:(id)fp8;
- (void)applicationDidFinishLaunching:(id)fp8;
- (BOOL)applicationShouldHandleReopen:(id)fp8 hasVisibleWindows:(BOOL)fp12;
- (BOOL)application:(id)fp8 openTempFile:(id)fp12;
- (BOOL)application:(id)fp8 openFile:(id)fp12;
- (int)applicationShouldTerminate:(id)fp8;
- (void)continueTermination:(id)fp8;
- (void)cancelTermination:(id)fp8;
- (void)_updateSecureKeyboardEntry;
- (void)setSecureKeyboardEntryAllowed:(BOOL)fp8;
- (void)new:(id)fp8;
- (void)newFactoryDefault:(id)fp8;
- (void)open:(id)fp8;
- (void)openLibraryTerm:(id)fp8;
- (void)connectToServer:(id)fp8;
- (BOOL)openFile:(id)fp8;
- (BOOL)openCommandFile:(id)fp8;
- (BOOL)openTermFile:(id)fp8;
- (BOOL)openTermFileWithStream:(id)fp8;
- (void)save:(id)fp8;
- (void)saveAs:(id)fp8;
- (void)changeSavedTerminals:(id)fp8;
- (void)changeSaveExecutionType:(id)fp8;
- (void)_setNewShellMenuItemWithOptionKey:(BOOL)fp8;
- (void)sendEvent:(id)fp8;
- (void)_activateNext:(id)fp8 forward:(BOOL)fp12 includeMini:(BOOL)fp16;
- (void)nextTerm:(id)fp8;
- (void)prevTerm:(id)fp8;
- (void)assignKeyEquivalentToWindowsItem:(id)fp8;
- (void)addWindowsItem:(id)fp8 title:(id)fp12 filename:(BOOL)fp16;
- (void)changeWindowsItem:(id)fp8 title:(id)fp12 filename:(BOOL)fp16;
- (void)updateWindowsItem:(id)fp8;
- (void)removeWindowsItem:(id)fp8;
- (void)updateLibraryMenu;
- (id)sendBreakMenuItem;
- (void)orderFrontFontPanel:(id)fp8;
- (void)windowDidBecomeMainNotification:(id)fp8;
- (void)updateFontPanel;
- (void)saveAsDefaultFont:(id)fp8;
- (void)changeFont:(id)fp8;
- (void)changeFontSpacing:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (void)modifyFont:(id)fp8;
- (void)secureKeyboardEntry:(id)fp8;
- (void)preferences:(id)fp8;
- (void)info:(id)fp8;
- (void)runCommand:(id)fp8;
- (void)blinkTimerDidFire:(id)fp8;
- (id)applicationDockMenu:(id)fp8;
- (id)bellData;
- (id)alertSoundPath;
- (void)cancelAllBells;
- (void)decrementBells;
- (void)incrementBells;

@end

@interface TermController : NSWindowController
{
    TermView *termView;
    Splitter *splitter;
    BOOL scrolling;
    Shell *shell;
    TermEmulator *emulator;
    vt52 *vt52emulator;
    vt100 *vt100emulator;
    TermDefaults *defaults;
    TermStorage *storage;
    NSString *filename;
    int windowsMenuNumber;
    int oldTitleBits;
    int originalRows;
    int originalColumns;
    BOOL ignoreResize;
    BOOL liveResize;
    double updateContentsDelay;
    BOOL pendingUpdateContents;
    BOOL pendingUpdateScroller;
    BOOL bellCanceled;
    NSSound *bellSound;
    int bellRepeats;
    NSView *accessoryView;
    NSCell *printSelectedRangeMatrixCell;
    NSTextView *printTextView;
    NSImage *termBackground;
    NSImage *originalImage;
}

- (id)init;
- (id)initWithDefaults:(id)fp8;
- (id)initWithFactoryDefaults;
- (void)windowDidLoad;
- (void)dealloc;
- (id)defaults;
- (id)filename;
- (void)setFilename:(id)fp8;
- (BOOL)scrolling;
- (id)termView;
- (id)termBackground;
- (void)resetTermBackground;
- (id)shell;
- (void)shell:(id)fp8 childDidExitWithStatus:(int)fp12;
- (void)sendBreak:(id)fp8;
- (void)sendReset:(id)fp8;
- (void)sendHardReset:(id)fp8;
- (id)emulator;
- (void)emulateVt52AtRow:(unsigned int)fp8 column:(unsigned int)fp12 withString:(id)fp16;
- (void)emulateVt102AtRow:(unsigned int)fp8 column:(unsigned int)fp12 withString:(id)fp16;
- (id)storage;
- (void)clearScrollback:(id)fp8;
- (void)pageLayout:(id)fp8;
- (void)printDocument:(id)fp8;
- (void)printOperationDidRun:(id)fp8 success:(BOOL)fp12 contextInfo:(void *)fp16;
- (void)printVisibleRange:(id)fp8;
- (void)printSelectedRange:(id)fp8;
- (void)printScrollbackBuffer:(id)fp8;
- (void)savePanelDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)saveTextAs:(id)fp8;
- (void)saveSelectedTextAs:(id)fp8;
- (void)inspector:(id)fp8;
- (void)quickTitle:(id)fp8;
- (void)useAsDefaults:(id)fp8;
- (void)find:(id)fp8;
- (void)findNext:(id)fp8;
- (void)findPrevious:(id)fp8;
- (void)enterSelection:(id)fp8;
- (void)windowDidMove:(id)fp8;
- (struct _NSSize)windowWillResize:(id)fp8 toSize:(struct _NSSize)fp12;
- (void)_endResize;
- (void)windowDidResize:(id)fp8;
- (void)windowDidResignKey:(id)fp8;
- (void)windowDidBecomeKey:(id)fp8;
- (void)windowWillMiniaturize:(id)fp8;
- (void)windowDidDeminiaturize:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)windowWillClose:(id)fp8;
- (void)closeSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (int)windowsMenuNumber;
- (void)setWindowsMenuNumber:(int)fp8;
- (void)fontChanged;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayFromLine:(unsigned int)fp8 toLine:(unsigned int)fp12;
- (void)scrollAndSetNeedsDisplayForLines:(unsigned int)fp8;
- (void)_blinkNotification:(id)fp8;
- (void)updateScroller;
- (void)opacityChanged;
- (void)delayedUpdateScroller;
- (void)updateTitle;
- (void)returnToDefaultSize:(id)fp8;
- (void)updateSize;
- (void)updateSizeForRows:(unsigned int)fp8 columns:(unsigned int)fp12;
- (void)_updateContents;
- (void)delayedUpdateContents;
- (void)updateContents;
- (void)ringBell;
- (void)cancelBell;
- (void)sound:(id)fp8 didFinishPlaying:(BOOL)fp12;
- (void)setWindowContentSizeManually:(struct _NSSize)fp8;
- (void)terminalWillStartLiveResize;
- (void)terminalDidEndLiveResize;
- (void)selectAll:(id)fp8;

@end

@interface TermDefaults : NSObject
{
    BOOL autoFocus;
    BOOL autowrap;
    BOOL rewrapOnResize;
    BOOL scrollback;
    BOOL scrollbar;
    BOOL strictEmulation;
    BOOL backwrap;
    BOOL scrollRegionCompat;
    BOOL translate;
    BOOL disableAnsiColors;
    BOOL isMiniaturized;
    BOOL blinkCursor;
    BOOL blinkText;
    BOOL enableDragCopy;
    BOOL doubleBold;
    BOOL bell;
    BOOL visualBell;
    BOOL optionClickToMoveCursor;
    BOOL doubleWideChars;
    BOOL useCtrlVEscapes;
    BOOL doubleColumnsForDoubleWide;
    BOOL fontAntialiasing;
    BOOL deleteKeySendsBackspace;
    BOOL winLocULYWasSet;
    BOOL winLocYWasSet;
    unsigned short rows;
    unsigned short columns;
    unsigned short scrollRows;
    int saveLines;
    int shellExitAction;
    int windowCloseAction;
    int cursorShape;
    int X;
    int Y;
    float winLocX;
    float winLocY;
    float winLocULY;
    float fontWidthSpacing;
    float fontHeightSpacing;
    float backgroundOpacity;
    unsigned char titleBits;
    unsigned int encoding;
    BOOL meta;
    int padTop;
    int padBottom;
    int padLeft;
    int padRight;
    NSArray *shellArray;
    NSString *shell;
    NSString *custTitleString;
    NSString *executionString;
    NSString *termCapString;
    NSString *workingDirectory;
    NSArray *cleanCommands;
    NSColor *selectionBackgroundColor;
    NSColor *cursorColor;
    NSString *backgroundImagePath;
    NSColor *colors[19];
    NSColor *transparentColors[19];
    NSFont *font;
    struct _NSSize characterSize;
    NSMutableDictionary *keyBindings;
    BOOL fontValid;
    unsigned int fontID;
    int fontSize;
    int singleWidth;
    int doubleWidth;
    struct OpaqueATSUStyle *styles[154];
}

+ (void)initialize;
+ (id)defaultsFromDB;
+ (id)defaultsFromTypedStream:(id)fp8;
- (id)_init:(id)fp8;
- (id)init;
- (id)initWithFactoryDefaults;
- (id)initWithDictionary:(id)fp8;
- (id)initWithTypedStream:(id)fp8;
- (id)copyWithZone:(struct _NSZone *)fp8;
- (void)dealloc;
- (id)dictionaryRepresentation;
- (id)description;
- (void)useAsDefaults;
- (void)_syncTransparentColors;
- (void)setAutoFocus:(BOOL)fp8;
- (BOOL)autoFocus;
- (void)setAutowrap:(BOOL)fp8;
- (BOOL)autowrap;
- (BOOL)autowrapFromDefaults;
- (void)setRewrapOnResize:(BOOL)fp8;
- (BOOL)rewrapOnResize;
- (void)setDoubleBold:(BOOL)fp8;
- (BOOL)doubleBold;
- (void)setBlinkCursor:(BOOL)fp8;
- (BOOL)blinkCursor;
- (void)setBlinkText:(BOOL)fp8;
- (BOOL)blinkText;
- (void)setEnableDragCopy:(BOOL)fp8;
- (BOOL)enableDragCopy;
- (void)setDisableAnsiColors:(BOOL)fp8;
- (BOOL)disableAnsiColors;
- (void)setScrollback:(BOOL)fp8;
- (BOOL)scrollback;
- (void)setScrollbar:(BOOL)fp8;
- (BOOL)scrollbar;
- (void)setStrictEmulation:(BOOL)fp8;
- (BOOL)strictEmulation;
- (void)setTranslate:(BOOL)fp8;
- (BOOL)translate;
- (void)setBell:(BOOL)fp8;
- (BOOL)bell;
- (void)setVisualBell:(BOOL)fp8;
- (BOOL)visualBell;
- (void)setOptionClickToMoveCursor:(BOOL)fp8;
- (BOOL)optionClickToMoveCursor;
- (void)setStringEncoding:(unsigned int)fp8;
- (unsigned int)stringEncoding;
- (void)setColumns:(unsigned short)fp8;
- (unsigned short)columns;
- (void)setRows:(unsigned short)fp8;
- (unsigned short)rows;
- (void)setScrollRows:(unsigned short)fp8;
- (unsigned short)scrollRows;
- (void)setMeta:(BOOL)fp8;
- (BOOL)meta;
- (void)setPadTop:(int)fp8;
- (int)padTop;
- (void)setPadBottom:(int)fp8;
- (int)padBottom;
- (void)setPadLeft:(int)fp8;
- (int)padLeft;
- (void)setPadRight:(int)fp8;
- (int)padRight;
- (void)setShellArray:(id)fp8;
- (id)shellArray;
- (void)setShell:(id)fp8;
- (id)shell;
- (void)setExecutionString:(id)fp8;
- (id)executionString;
- (void)setTermCapString:(id)fp8;
- (id)termCapString;
- (void)setShellExitAction:(int)fp8;
- (int)shellExitAction;
- (void)setWindowCloseAction:(int)fp8;
- (int)windowCloseAction;
- (void)setCursorShape:(int)fp8;
- (int)cursorShape;
- (void)setSaveLines:(int)fp8;
- (int)saveLines;
- (void)setCustTitleString:(id)fp8;
- (id)custTitleString;
- (void)setTitleBits:(unsigned char)fp8;
- (unsigned char)titleBits;
- (void)setWinLocY:(float)fp8;
- (float)winLocY;
- (BOOL)winLocYWasSet;
- (void)setWinLocULY:(float)fp8;
- (float)winLocULY;
- (BOOL)winLocULYWasSet;
- (void)setWinLocX:(float)fp8;
- (float)winLocX;
- (void)setBackgroundOpacity:(float)fp8;
- (float)backgroundOpacity;
- (void)setIsMiniaturized:(BOOL)fp8;
- (BOOL)isMiniaturized;
- (void)setWorkingDirectory:(id)fp8;
- (id)workingDirectory;
- (void)setBackgroundImagePath:(id)fp8;
- (id)backgroundImagePath;
- (void)_setColorForVTColor:(int)fp8 color:(id)fp12;
- (void)setTextColor:(id)fp8;
- (id)textColor;
- (void)setBoldTextColor:(id)fp8;
- (id)boldTextColor;
- (void)setSelectionBackgroundColor:(id)fp8;
- (id)selectionBackgroundColor;
- (void)setCursorColor:(id)fp8;
- (id)cursorColor;
- (void)setBackgroundColor:(id)fp8;
- (id)backgroundColor;
- (void)setColorString:(id)fp8;
- (id *)colorArray;
- (id *)transparentColorArray;
- (id)colorString;
- (void)setCleanCommands:(id)fp8;
- (id)cleanCommands;
- (void)_setFontWidthHeight;
- (void)setFontWidthSpacing:(float)fp8;
- (float)fontWidthSpacing;
- (void)setFontHeightSpacing:(float)fp8;
- (float)fontHeightSpacing;
- (id)font;
- (void)setFont:(id)fp8;
- (struct _NSSize)characterSize;
- (struct OpaqueATSUStyle *)style:(int)fp8 forColor:(int)fp12;
- (void)setDoubleWideChars:(BOOL)fp8;
- (BOOL)doubleWideChars;
- (void)setUseCtrlVEscapes:(BOOL)fp8;
- (BOOL)useCtrlVEscapes;
- (void)setDoubleColumnsForDoubleWide:(BOOL)fp8;
- (BOOL)doubleColumnsForDoubleWide;
- (void)setANSIColorForIndex:(int)fp8 color:(id)fp12;
- (id)ansiColorForIndex:(int)fp8;
- (void)setFontAntialiasing:(BOOL)fp8;
- (BOOL)fontAntialiasing;
- (void)setBackwrap:(BOOL)fp8;
- (BOOL)backwrap;
- (BOOL)backwrapFromDefaults;
- (void)setScrollRegionCompat:(BOOL)fp8;
- (BOOL)scrollRegionCompat;
- (id)bindingForKey:(id)fp8;
- (void)removeBindingForKey:(id)fp8;
- (void)setBinding:(id)fp8 forKey:(id)fp12;
- (id)keyBindings;
- (void)setDeleteKeySendsBackspace:(BOOL)fp8;
- (BOOL)deleteKeySendsBackspace;

@end

@interface TermPrint : NSView
{
    TermView *termView;
    unsigned int top;
    unsigned int bot;
    StyledLayout *styledLayout;
}

- (id)initWithTermView:(id)fp8;
- (void)dealloc;
- (void)setLineRange:(struct _NSRange)fp8;
- (void)adjustPageHeightNew:(float *)fp8 top:(float)fp12 bottom:(float)fp16 limit:(float)fp20;
- (BOOL)isFlipped;
- (void)drawRect:(struct _NSRect)fp8;
- (id)printJobTitle;

@end

@interface TermView : AccessibleView
{
    TermController *controller;
    TermSubview *mainSubview;
    ScrollSubview *scrollSubview;
    NSView *superviewOfScrollSubview;
    NSScroller *mainScroller;
    NSScroller *scrollScroller;
    unsigned int bottomOffset;
    BOOL blinkingTextOff;
    BOOL selInProgress;
    BOOL cursorOff;
    BOOL prevCursorOff;
    unsigned short prevCursorRow;
    unsigned short prevCursorColumn;
    int prevCursorShape;
    NSColor *prevCursorColor;
    TermFakeScrollView *mainFakeScrollView;
    TermFakeScrollView *scrollFakeScrollView;
}

- (void)awakeFromNib;
- (void)dealloc;
- (void)_blinkNotification:(id)fp8;
- (BOOL)selInProgress;
- (void)setSelInProgress:(BOOL)fp8;
- (BOOL)cursorOff;
- (unsigned int)bottomOffset;
- (void)setBottomOffset:(unsigned int)fp8;
- (BOOL)blinkingTextOff;
- (id)mainSubview;
- (id)scrollSubview;
- (void)fontChanged;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (struct _NSSize)contentSizeForRowsCols:(CDAnonymousStruct3)fp8;
- (CDAnonymousStruct3)rowsColsForContentSize:(struct _NSSize)fp8;
- (void)adjustScrollSubview:(int)fp8;
- (void)invalidateCursorRects;
- (void)updateScroller;
- (struct _NSRange)visibleLineRange;
- (struct _NSRange)_activeVisibleRange;
- (void)scrollTo:(unsigned int)fp8;
- (void)scrollLines:(int)fp8;
- (void)autoScrollTo:(unsigned int)fp8;
- (void)smartAutoScrollTo:(unsigned int)fp8;
- (void)lineUpNumber:(int)fp8;
- (void)lineDownNumber:(int)fp8;
- (void)pageUp:(id)fp8;
- (void)pageDown:(id)fp8;
- (void)lineUp:(id)fp8;
- (void)lineDown:(id)fp8;
- (void)scrollTop:(id)fp8;
- (void)scrollBottom:(id)fp8;
- (void)jumpToSelection:(id)fp8;
- (void)positionFrom:(id)fp8;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayFromLine:(unsigned int)fp8 toLine:(unsigned int)fp12;
- (void)setNeedsDisplayForRow:(unsigned short)fp8;
- (void)scrollAndSetNeedsDisplayForLines:(unsigned int)fp8;
- (void)refresh;
- (void)flashView;
- (BOOL)markCursorIfChanged;

@end

@interface vt52 : TermEmulator
{
    struct _vt52flags vt52flags;
    SEL writer;
    short residualColumns;
}

- (void)_setCursorRow:(int)fp8;
- (void)reset;
- (void)updateSize;
- (void)dealloc;
- (void)setCursorRow:(int)fp8;
- (void)setCursorColumn:(int)fp8;
- (void)setCursorRow:(int)fp8 column:(int)fp12;
- (id)interpretKeyEvent:(id)fp8;
- (void)_vt52getcol:(unsigned short)fp8;
- (void)_vt52getline:(unsigned short)fp8;
- (void)_vt52Escape:(unsigned short)fp8;
- (void)_ctrloutput:(unsigned short)fp8;
- (void)_displayChars:(unsigned short *)fp8 range:(struct _NSRange)fp12 nonASCII:(BOOL)fp20 customChar:(BOOL)fp24;
- (void)_translateAndDisplayChars:(unsigned short *)fp8 range:(struct _NSRange)fp12;
- (void)interpretString:(id)fp8;

@end

@interface vt100 : vt100Base
{
    int *parsestate;
    int scstype;
}

- (void)_ansi_modes:(void *)fp8;
- (void)_setCursorRow:(int)fp8;
- (void)_cursorBack:(int)fp8;
- (void)_cursorDown:(int)fp8;
- (void)_cursorForward:(int)fp8;
- (void)_cursorSet:(int)fp8 col:(int)fp12;
- (void)_cursorUp:(int)fp8;
- (void)interpretString:(id)fp8;
- (void)_index:(int)fp8;
- (void)reset;
- (void)_revIndex:(int)fp8;

@end

@interface DisplayInspector : NSObject
{
    InspectorController *inspectorController;
    NSMatrix *cursorMatrix;
    NSTextField *fontNameTextField;
    NSButton *blinkCursorCheck;
    NSButton *doubleWideCharsCheckBox;
    NSButton *doubleColumnsForDoubleWideCheckBox;
    NSButton *fontAntialiasingCheckBox;
    NSButton *enableDragCopyCheckBox;
    NSButton *blinkTextCheckBox;
    NSPopUpButton *encodingPopUpButton;
}

- (void)update;
- (void)changed:(id)fp8;
- (void)setFont:(id)fp8;

@end

@interface EmulationInspector : NSObject
{
    InspectorController *inspectorController;
    NSButton *translateCheck;
    NSButton *strictCheck;
    NSButton *optionClickCheckBox;
    NSButton *useCtrlVEscapesCheckBox;
    NSButton *visualBellCheckBox;
    NSButton *audibleBellCheckBox;
    NSButton *backWrapCheckBox;
}

- (void)update;
- (void)changed:(id)fp8;

@end

@interface ColorInspector : NSObject
{
    InspectorController *inspectorController;
    NSColorWell *boldTextWell;
    NSColorWell *cursorWell;
    NSColorWell *normalBackWell;
    NSColorWell *normalTextWell;
    NSColorWell *selectionWell;
    NSSlider *opacitySlider;
    NSButton *disableAnsiCheck;
    NSPopUpButton *standardColorsPopUp;
    NSTextField *backgroundImageName;
    NSButton *imageSelectionButton;
    NSMatrix *backgroundTypeMatrix;
}

- (void)update;
- (void)selectImage:(id)fp8;
- (void)backgroundTypeChanged:(id)fp8;
- (void)changed:(id)fp8;
- (void)changedToStandard:(id)fp8;

@end

@interface WindowInspector : NSObject
{
    InspectorController *inspectorController;
    NSTextField *rowsText;
    NSTextField *columnsText;
    NSTextField *customText;
    NSMatrix *bitMatrix;
}

- (void)update;
- (void)changed:(id)fp8;
- (void)setQuickTitle;

@end

@interface BufferInspector : NSObject
{
    InspectorController *inspectorController;
    NSButton *wrapLinesButton;
    NSButton *rewrapLinesButton;
    NSButton *scrollToBottomButton;
    NSTextField *scrollbackLengthText;
    NSMatrix *scrollbackMatrix;
}

- (void)update;
- (void)changed:(id)fp8;

@end

@interface TerminalApp (Scriptability)
- (id)properties;
- (void)setProperties:(id)fp8;
- (id)doScript:(id)fp8;
- (void)getURL:(id)fp8;
@end

@interface NSWindow (Scriptability)
- (id)doScript:(id)fp8;
- (int)numberOfColumns;
- (void)setNumberOfColumns:(int)fp8;
- (int)numberOfRows;
- (void)setNumberOfRows:(int)fp8;
- (int)titleDisplaysShellPath;
- (void)setTitleDisplaysShellPath:(int)fp8;
- (int)titleDisplaysDeviceName;
- (void)setTitleDisplaysDeviceName:(int)fp8;
- (int)titleDisplaysWindowSize;
- (void)setTitleDisplaysWindowSize:(int)fp8;
- (int)titleDisplaysFileName;
- (void)setTitleDisplaysFileName:(int)fp8;
- (int)titleDisplaysCustomTitle;
- (void)setTitleDisplaysCustomTitle:(int)fp8;
- (id)customTitle;
- (void)setCustomTitle:(id)fp8;
- (id)terminalBackgroundColor;
- (void)setTerminalBackgroundColor:(id)fp8;
- (id)cursorColor;
- (void)setCursorColor:(id)fp8;
- (id)normalTextColor;
- (void)setNormalTextColor:(id)fp8;
- (id)boldTextColor;
- (void)setBoldTextColor:(id)fp8;
- (id)position;
- (void)setPosition:(id)fp8;
- (id)bounds;
- (void)setBounds:(id)fp8;
- (id)aeOrigin;
- (void)setAeOrigin:(id)fp8;
- (id)aeSize;
- (void)setAeSize:(id)fp8;
- (id)aeFrame;
- (void)setAeFrame:(id)fp8;
- (id)contents;
- (void)setContents:(id)fp8;
- (id)history;
- (void)setHistory:(id)fp8;
- (BOOL)busy;
- (id)processes;
- (BOOL)frontmost;
- (void)setFrontmost:(BOOL)fp8;
- (id)properties;
- (void)setProperties:(id)fp8;
@end

@interface DoScriptVerb : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface TermStorage : NSObject
{
    TermController *controller;
    TermDefaults *defaults;
    NSMutableArray *lineBuffer;
    NSMutableAttributedString *textStorage;
    int altBuffer;
    int altBufferSavedLine;
    int altBufferSavedCol;
    CDAnonymousStruct2 selPt0;
    CDAnonymousStruct2 selPt1;
    int selType;
    BOOL selEnd;
    unsigned int rows;
    unsigned int columns;
    unsigned int halfColumns;
    Layout *asciiLayout;
    SimpleLayout *simpleLayout;
    Layout *cachedLayout;
    unsigned int layoutLine;
    BOOL layoutNonASCII;
    StyledLayout *styledLayout;
    BOOL debug;
    int keySelMode;
}

- (id)initWithTermController:(id)fp8;
- (void)dealloc;
- (void)_checkConsistency;
- (unsigned int)numberOfLines;
- (BOOL)lineWraps:(unsigned int)fp8;
- (id)termLineForLine:(unsigned int)fp8;
- (CDAnonymousUnion1)textStyleForLine:(unsigned int)fp8;
- (id)noNewlineStringForLine:(unsigned int)fp8;
- (id)stringForLine:(unsigned int)fp8;
- (id)stringForLineRange:(struct _NSRange)fp8;
- (id)attributedStringForLineRange:(struct _NSRange)fp8;
- (id)string;
- (struct _NSRange)characterRangeForLine:(unsigned int)fp8;
- (id)attributesForLine:(unsigned int)fp8 offset:(unsigned short)fp12 effectiveRange:(struct _NSRange *)fp16;
- (id)attributedStringForLine:(unsigned int)fp8;
- (struct _NSRange)lineRangeForLine:(unsigned int)fp8;
- (BOOL)alternateBufferOn;
- (int)singleDoubleForLine:(unsigned int)fp8;
- (unsigned int)effectiveColumnsForLine:(unsigned int)fp8;
- (void)_adjustLineLocationsBy:(int)fp8 startLine:(unsigned int)fp12;
- (void)_removeLineRange:(struct _NSRange)fp8;
- (void)trimToLine:(unsigned int)fp8;
- (void)periodicMaintenance;
- (void)clearScrollback;
- (void)updateSize;
- (void)rewrapForColumns:(unsigned short)fp8 rows:(unsigned short)fp12 trackingLine:(unsigned int *)fp16 column:(unsigned int *)fp20;
- (void)clearLineRange:(struct _NSRange)fp8 textStyle:(CDAnonymousUnion1)fp16;
- (void)clearLineRange:(struct _NSRange)fp8;
- (void)scrollLineRange:(struct _NSRange)fp8 up:(unsigned int)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)scrollLineRange:(struct _NSRange)fp8 up:(unsigned int)fp16;
- (void)scrollLineRange:(struct _NSRange)fp8 down:(unsigned int)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)scrollLineRange:(struct _NSRange)fp8 down:(unsigned int)fp16;
- (void)appendNewLines:(unsigned int)fp8 textStyle:(CDAnonymousUnion1)fp12;
- (void)appendNewLines:(unsigned int)fp8;
- (void)scrollNewLines:(unsigned int)fp8 textStyle:(CDAnonymousUnion1)fp12;
- (void)scrollNewLines:(unsigned int)fp8;
- (void)makeLine:(unsigned int)fp8 line:(unsigned int)fp12 numberOfLines:(unsigned int)fp16;
- (void)makeLine:(unsigned int)fp8 linesFromBottom:(unsigned int)fp12;
- (void)moveLineRange:(struct _NSRange)fp8 toLine:(unsigned int)fp16;
- (unsigned int)lineFromRow:(unsigned short)fp8;
- (void)setSingleDouble:(int)fp8 forRow:(unsigned short)fp12;
- (void)setWrap:(BOOL)fp8 forRow:(unsigned short)fp12;
- (unsigned int)effectiveColumnsForRow:(unsigned short)fp8;
- (void)clearRow:(unsigned short)fp8 fromColumn:(unsigned short)fp12 textStyle:(CDAnonymousUnion1)fp16;
- (void)clearRow:(unsigned short)fp8 toColumn:(unsigned short)fp12 textStyle:(CDAnonymousUnion1)fp16;
- (void)clearRowRange:(struct _NSRange)fp8 textStyle:(CDAnonymousUnion1)fp16;
- (void)deleteCharacters:(unsigned short)fp8 atRow:(unsigned short)fp12 column:(unsigned short)fp16;
- (void)insertCharacters:(unsigned short)fp8 atRow:(unsigned short)fp12 column:(unsigned short)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)eraseCharacters:(unsigned short)fp8 atRow:(unsigned short)fp12 column:(unsigned short)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (struct _NSRange)unusedOffsetRangeFromChars:(unsigned short *)fp8 offsetRange:(struct _NSRange)fp12 textStyle:(CDAnonymousUnion1)fp20 nonASCII:(BOOL)fp24 atRow:(unsigned short)fp28 column:(unsigned short)fp32 insertMode:(BOOL)fp36 columnNow:(unsigned short *)fp40;
- (struct _NSRange)unusedOffsetRangeFromChars:(unsigned short *)fp8 offsetRange:(struct _NSRange)fp12 textStyle:(CDAnonymousUnion1)fp20 nonASCII:(BOOL)fp24 atRow:(unsigned short)fp28 column:(unsigned short)fp32 insertMode:(BOOL)fp36 columnNow:(unsigned short *)fp40 residualColumns:(short *)fp44;
- (void)scrollRowRange:(struct _NSRange)fp8 down:(unsigned int)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)scrollRowRange:(struct _NSRange)fp8 up:(unsigned int)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)scrollOffTopRow:(unsigned short)fp8 to:(unsigned short)fp12 lines:(unsigned short)fp16 textStyle:(CDAnonymousUnion1)fp20;
- (void)activateAlternateBufferWithCursorRow:(int)fp8 column:(int)fp12;
- (void)deactivateAlternateBufferRestoringCursorRow:(int *)fp8 column:(int *)fp12;
- (BOOL)hasSelection;
- (BOOL)isSelected:(int)fp8:(int)fp12;
- (CDAnonymousStruct2)selPt0;
- (CDAnonymousStruct2)selPt1;
- (void)setSelPt0line:(unsigned int)fp8 offset:(unsigned short)fp12;
- (void)setSelPt1line:(unsigned int)fp8 offset:(unsigned short)fp12;
- (struct _NSRange)selectedLineRange;
- (id)selectedString;
- (id)attributedSelectedString;
- (void)clearSelection;
- (void)selectAll;
- (CDAnonymousStruct2)_startOfWordAtLine:(int)fp8 offset:(int)fp12;
- (CDAnonymousStruct2)_endOfWordAtLine:(int)fp8 offset:(int)fp12;
- (void)_dragEnd:(unsigned int)fp8:(unsigned short)fp12;
- (void)startSelectionAtLine:(unsigned int)fp8 column:(unsigned short)fp12;
- (void)startSelectionAtLine:(unsigned int)fp8 offset:(unsigned short)fp12;
- (void)endSelectionAtLine:(unsigned int)fp8 offset:(unsigned short)fp12;
- (void)extendSelectionToLine:(unsigned int)fp8 offset:(unsigned short)fp12;
- (CDAnonymousStruct2)_prevDelim:(id)fp8 atLine:(int)fp12 offset:(int)fp16;
- (CDAnonymousStruct2)_nextDelim:(id)fp8 atLine:(int)fp12 offset:(int)fp16;
- (void)selectURLAtLine:(int)fp8 offset:(int)fp12;
- (void)selectWordAtLine:(unsigned int)fp8 offset:(unsigned int)fp12;
- (void)selectLine:(unsigned int)fp8;
- (BOOL)selectNextMatch:(id)fp8 caseInsensitive:(BOOL)fp12;
- (BOOL)selectPreviousMatch:(id)fp8 caseInsensitive:(BOOL)fp12;
- (id)cachedLayoutForLine:(unsigned int)fp8;
- (id)cachedLayoutForLine:(unsigned int)fp8 nonASCII:(BOOL)fp12;
- (id)cachedLayoutForRow:(unsigned int)fp8;
- (id)drawLayoutForString:(id)fp8;
- (void)invalidateCachedLayout;
- (id)layoutForString:(id)fp8 range:(struct _NSRange)fp12 nonASCII:(BOOL)fp20;
- (id)styledLayout;

@end

@interface NSMutableAttributedString (Terminal)
- (void)appendString:(id)fp8;
- (BOOL)hasSuffix:(id)fp8;
@end

@interface TermSubview : AccessibleView <NSTextInput>
{
    TermController *controller;
    TermView *termView;
    char dirtyMap[2047];
    NSAttributedString *markedText;
    struct _NSRange selectedRange;
    BOOL dragHiliting;
    BOOL flashingView;
    BOOL isDirty;
    BOOL isNumberOfCharactersCached;
    BOOL isScrolling;
    NSNumber *cachedNumberOfCharacters;
}

+ (void)initialize;
- (void)_myInit;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)dealloc;
- (BOOL)_blinkNotification:(id)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)_addCursorTrapezoidsForLine:(unsigned int)fp8 startOff:(unsigned int)fp12 endOff:(unsigned int)fp16 cursor:(id)fp20;
- (void)setFrame:(struct _NSRect)fp8;
- (void)resetCursorRects;
- (BOOL)isOpaque;
- (BOOL)isFlipped;
- (void)setNeedsDisplay:(BOOL)fp8;
- (struct _NSRange)visibleLineRange;
- (BOOL)acceptsFirstResponder;
- (void)keyDown:(id)fp8;
- (void)insertText:(id)fp8;
- (void)scrollPageUp:(id)fp8;
- (void)scrollPageDown:(id)fp8;
- (void)scrollToBeginningOfDocument:(id)fp8;
- (void)scrollToEndOfDocument:(id)fp8;
- (unsigned int)characterIndexForPoint:(struct _NSPoint)fp8;
- (long)conversationIdentifier;
- (id)attributedSubstringFromRange:(struct _NSRange)fp8;
- (void)doCommandBySelector:(SEL)fp8;
- (struct _NSRange)markedRange;
- (struct _NSRange)selectedRange;
- (struct _NSRect)firstRectForCharacterRange:(struct _NSRange)fp8;
- (void)setMarkedText:(id)fp8 selectedRange:(struct _NSRange)fp12;
- (void)unmarkText;
- (BOOL)hasMarkedText;
- (id)validAttributesForMarkedText;
- (void)updateMarkedText;
- (void)_pasteText:(id)fp8;
- (BOOL)_appendTextFromPasteboard:(id)fp8 fileDrop:(BOOL)fp12;
- (void)copy:(id)fp8;
- (void)copyRTF:(id)fp8;
- (void)paste:(id)fp8;
- (void)pasteSelection:(id)fp8;
- (void)pasteQuoted:(id)fp8;
- (BOOL)validateMenuItem:(id)fp8;
- (id)validRequestorForSendType:(id)fp8 returnType:(id)fp12;
- (BOOL)writeSelectionToPasteboard:(id)fp8 types:(id)fp12;
- (BOOL)readSelectionFromPasteboard:(id)fp8;
- (void)copyFont:(id)fp8;
- (void)pasteFont:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (void)draggingExited:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (unsigned int)draggingSourceOperationMaskForLocal:(BOOL)fp8;
- (void)draggedImage:(id)fp8 endedAt:(struct _NSPoint)fp12 operation:(unsigned int)fp20;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayFromLine:(unsigned int)fp8 toLine:(unsigned int)fp12;
- (void)flashView;
- (void)_point:(struct _NSPoint)fp8 toY:(unsigned int *)fp16 x:(unsigned int *)fp20 nearestX:(unsigned int *)fp24;
- (void)_optionClickEvent:(id)fp8:(unsigned int)fp12:(unsigned short)fp16;
- (void)_optionClickEventHelper:(id)fp8:(unsigned int)fp12:(unsigned short)fp16;
- (void)_dragStart:(struct _NSPoint)fp8 nowAt:(struct _NSPoint)fp16 event:(id)fp24;
- (void)mouseEntered:(id)fp8;
- (void)mouseExited:(id)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)otherMouseDown:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)scrollWheel:(id)fp8;
- (struct _NSSize)contentSizeForRowsCols:(CDAnonymousStruct3)fp8;

@end

@interface Splitter : AccessibleView
{
    TermView *termView;
    TermController *controller;
    NSButton *button;
    int prevDrag;
    int prevY;
    BOOL liveResize;
    unsigned int lastScrollRows;
}

+ (unsigned int)closedHeight;
+ (unsigned int)openHeight;
- (void)_setButtonClose;
- (void)_setButtonOpen;
- (void)awakeFromNib;
- (id)initWithFrame:(struct _NSRect)fp8;
- (void)drawRect:(struct _NSRect)fp8;
- (void)mouseDown:(id)fp8;
- (void)mouseDragged:(id)fp8;
- (void)mouseUp:(id)fp8;
- (void)resetCursorRects;
- (BOOL)isOpaque;
- (void)openClose:(id)fp8;
- (void)setLastScrollRows:(int)fp8;

@end

@interface ScrollSubview : TermSubview
{
}

+ (void)initialize;
- (void)_myInit;
- (void)resetCursorRects;
- (struct _NSRange)visibleLineRange;
- (BOOL)acceptsFirstResponder;
- (void)paste:(id)fp8;
- (unsigned int)draggingEntered:(id)fp8;
- (unsigned int)draggingUpdated:(id)fp8;
- (BOOL)prepareForDragOperation:(id)fp8;
- (BOOL)performDragOperation:(id)fp8;
- (void)setNeedsDisplay;
- (void)_point:(struct _NSPoint)fp8 toY:(unsigned int *)fp16 x:(unsigned int *)fp20 nearestX:(unsigned int *)fp24;
- (void)_optionClickEvent:(id)fp8:(unsigned int)fp12:(unsigned short)fp16;
- (struct _NSSize)contentSizeForRowsCols:(CDAnonymousStruct3)fp8;

@end

@interface vt100Base : TermEmulator
{
    struct _vt100flags vt100flags;
    struct _vt100flags saveVT100Flags;
    struct {
        unsigned int autowrap:1;
        unsigned int backwrap:1;
        unsigned int altBuffer:1;
        unsigned int columns132:1;
        unsigned int scrollBar:1;
        unsigned int autoFocus:1;
        unsigned int sendBackspace:1;
    } saveOtherFlags;
    unsigned char singleShift;
    CDAnonymousUnion1 curattr;
    CDAnonymousUnion1 savedattr;
    NSColor *color;
    NSColor *bcolor;
    unsigned short sx;
    unsigned short sy;
    unsigned short top;
    unsigned short bot;
    unsigned char tabs[2047];
    unsigned short altBufferCol;
    unsigned short altBufferRow;
    unsigned short altsx;
    unsigned short altsy;
    TermDefaults *defaults;
    TermStorage *storage;
    unsigned int rows;
    unsigned int columns;
    unsigned int effectiveColumns;
    int nparam;
    int param[32];
    NSMutableString *oscstring;
    BOOL percent;
    struct __sFILE *lprpipe;
    short residualColumns;
}

- (id)initWithTermController:(id)fp8;
- (void)dealloc;
- (void)hardReset;
- (void)reset;
- (void)resumeWithString:(id)fp8 atCursorRow:(unsigned int)fp12 column:(unsigned int)fp16;
- (void)updateSize;
- (void)setCursorRow:(int)fp8;
- (void)setCursorColumn:(int)fp8;
- (void)setCursorRow:(int)fp8 column:(int)fp12;
- (BOOL)cursorHidden;
- (BOOL)invertedVideo;
- (id)interpretKeyEvent:(id)fp8;
- (void)_charAttr;
- (void)_cursorRestore;
- (void)_cursorSave;
- (void)_decScreenAlignTest;
- (void)_deviceStatusReport;
- (void)_do_tabsel;
- (void)_dpmodes:(void *)fp8;
- (void)_insertLine:(unsigned int)fp8;
- (void)_deleteLine:(unsigned int)fp8;
- (void)_mediaControl;
- (void)_restoremodes;
- (void)_savemodes;
- (BOOL)_setScrollRegion;
- (BOOL)_tabNext;
- (BOOL)_tabPrev;
- (void)_textParams;
- (void)_displayChars:(unsigned short *)fp8 range:(struct _NSRange)fp12 nonASCII:(BOOL)fp20;
- (void)_translateAndDisplayChars:(unsigned short *)fp8 range:(struct _NSRange)fp12;
- (void)_xtermWinOps;

@end

@interface GetURLCommand : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface NSMutableString (Terminal)
- (void)replaceSlashNWithSlashR;
- (void)setAttributes:(id)fp8 range:(struct _NSRange)fp12;
@end

@interface Layout : NSObject
{
    TermDefaults *defaults;
    unsigned int nCharacters;
    unsigned short *lineBreaks;
    unsigned int nLineBreaks;
    unsigned int maxLineBreaks;
    BOOL widthValid;
    float width;
}

- (id)initWithDefaults:(id)fp8;
- (id)init;
- (void)dealloc;
- (void)addCursorTrapezoidsForStartOffset:(unsigned int)fp8 endOffset:(unsigned int)fp12 y:(float)fp16 view:(id)fp20 cursor:(id)fp24 doubleWide:(BOOL)fp28 effectiveColumns:(unsigned int)fp32;
- (CDAnonymousStruct4)charPosForColumn:(unsigned int)fp8;
- (int)colorIndexForStyle:(CDAnonymousUnion1)fp8;
- (unsigned int)columnForOffset:(unsigned int)fp8;
- (unsigned int)columnForX:(float)fp8;
- (unsigned int)columnForX:(float)fp8 nearestColumn:(unsigned int *)fp12;
- (unsigned short)columnLength;
- (unsigned int)length;
- (unsigned short *)lineBreaksForColumnWidth:(unsigned short)fp8 number:(unsigned int *)fp12;
- (unsigned short)maxColumns;
- (unsigned short *)nextLineBreak;
- (unsigned int)offsetForX:(float)fp8 nearestOffset:(unsigned int *)fp12;
- (struct _NSRange)offsetRangeChopLine;
- (struct _NSRange)offsetRangeClearFromColumn:(unsigned short)fp8;
- (struct _NSRange)offsetRangeClearToColumn:(unsigned short)fp8 deleteRange:(struct _NSRange *)fp12;
- (struct _NSRange)offsetRangeDeleteCharacters:(unsigned short)fp8 atColumn:(unsigned short)fp12;
- (struct _NSRange)offsetRangeForColumn:(unsigned int)fp8;
- (struct _NSRange)offsetRangeForColumnRange:(struct _NSRange)fp8 offTheEnd:(unsigned int *)fp16;
- (struct _NSRange)offsetRangeForStartOffset:(unsigned short)fp8 endOffset:(unsigned short)fp12 offTheEnd:(unsigned int *)fp16;
- (void)setString:(id)fp8 range:(struct _NSRange)fp12;
- (struct _NSRange)unusedOffsetRangeFromLineBreak:(unsigned short *)fp8 fromOffsetRange:(struct _NSRange)fp12 toColumn:(unsigned short)fp20 insertMode:(BOOL)fp24 returnAppendBlanks:(unsigned int *)fp28 fromOffsetRange:(struct _NSRange *)fp32 toOffsetRange:(struct _NSRange *)fp36 deleteOffsetRange:(struct _NSRange *)fp40 columnNow:(unsigned short *)fp44;
- (struct _NSRange)unusedOffsetRangeFromLineBreak:(unsigned short *)fp8 fromOffsetRange:(struct _NSRange)fp12 toColumn:(unsigned short)fp20 insertMode:(BOOL)fp24 returnAppendBlanks:(unsigned int *)fp28 fromOffsetRange:(struct _NSRange *)fp32 toOffsetRange:(struct _NSRange *)fp36 deleteOffsetRange:(struct _NSRange *)fp40 columnNow:(unsigned short *)fp44 residualColumns:(short *)fp48;
- (float)width;

@end

@interface SimpleLayout : Layout
{
    unsigned short *characters;
    unsigned int maxCharacters;
    struct {
        struct _NSRange;
        CDAnonymousUnion1;
        NSDictionary *;
    } *styleRanges;
    unsigned int nStyleRanges;
    unsigned int maxStyleRanges;
    struct OpaqueATSUTextLayout *layout;
}

- (id)init;
- (void)dealloc;
- (void)addCursorTrapezoidsForStartOffset:(unsigned int)fp8 endOffset:(unsigned int)fp12 y:(float)fp16 view:(id)fp20 cursor:(id)fp24 doubleWide:(BOOL)fp28 effectiveColumns:(unsigned int)fp32;
- (CDAnonymousStruct4)charPosForColumn:(unsigned int)fp8;
- (CDAnonymousStruct4)charPosForOffset:(unsigned int)fp8;
- (CDAnonymousStruct4)charPosForOffsetRange:(struct _NSRange)fp8;
- (void)clearOffsetRange:(struct _NSRange)fp8;
- (int)colorIndexForTextStyle:(CDAnonymousUnion1)fp8;
- (unsigned int)_columnCountBuffer:(unsigned short *)fp8 range:(struct _NSRange)fp12;
- (unsigned int)columnForOffset:(unsigned int)fp8;
- (unsigned short)columnLength;
- (void)drawAtY:(float)fp8;
- (void)drawTrapezoidsForColumnRange:(struct _NSRange)fp8 atY:(float)fp16;
- (void)drawTrapezoidsForOffsetRange:(struct _NSRange)fp8 atY:(float)fp16 height:(float)fp20;
- (void)drawTrapezoidsForOffsetRange:(struct _NSRange)fp8 atY:(float)fp16 height:(float)fp20 leftOffset:(float)fp24 rightOffset:(float)fp28;
- (unsigned short *)lineBreaksForColumnWidth:(unsigned short)fp8 number:(unsigned int *)fp12;
- (unsigned short)maxColumns;
- (CDAnonymousStruct1 *)nextStyleRange;
- (unsigned int)offsetForX:(float)fp8 nearestOffset:(unsigned int *)fp12;
- (struct _NSRange)offsetRangeChopLine;
- (struct _NSRange)offsetRangeClearFromColumn:(unsigned short)fp8;
- (struct _NSRange)offsetRangeClearToColumn:(unsigned short)fp8 deleteRange:(struct _NSRange *)fp12;
- (struct _NSRange)offsetRangeDeleteCharacters:(unsigned short)fp8 atColumn:(unsigned short)fp12;
- (struct _NSRange)offsetRangeForColumn:(unsigned int)fp8;
- (struct _NSRange)offsetRangeForColumnRange:(struct _NSRange)fp8 offTheEnd:(unsigned int *)fp16;
- (void)setLayoutWithCGContextRef:(struct CGContext *)fp8 antialiasing:(BOOL)fp12;
- (void)setDoubleWideForChars:(unsigned short *)fp8 offsetRange:(struct _NSRange)fp12 textStyle:(CDAnonymousUnion1)fp20;
- (void)setDrawString:(id)fp8;
- (void)setLength:(unsigned int)fp8;
- (void)setString:(id)fp8 range:(struct _NSRange)fp12;
- (void)setStyleRanges;
- (int)styleIndexFromTextStyle:(CDAnonymousUnion1)fp8;
- (struct _NSRange)unusedOffsetRangeFromLineBreak:(unsigned short *)fp8 fromOffsetRange:(struct _NSRange)fp12 toColumn:(unsigned short)fp20 insertMode:(BOOL)fp24 returnAppendBlanks:(unsigned int *)fp28 fromOffsetRange:(struct _NSRange *)fp32 toOffsetRange:(struct _NSRange *)fp36 deleteOffsetRange:(struct _NSRange *)fp40 columnNow:(unsigned short *)fp44;
- (struct _NSRange)unusedOffsetRangeFromLineBreak:(unsigned short *)fp8 fromOffsetRange:(struct _NSRange)fp12 toColumn:(unsigned short)fp20 insertMode:(BOOL)fp24 returnAppendBlanks:(unsigned int *)fp28 fromOffsetRange:(struct _NSRange *)fp32 toOffsetRange:(struct _NSRange *)fp36 deleteOffsetRange:(struct _NSRange *)fp40 columnNow:(unsigned short *)fp44 residualColumns:(short *)fp48;
- (float)width;

@end

@interface StyledLayout : SimpleLayout
{
    BOOL invertedVideo;
    BOOL disableAnsiColors;
    BOOL blinkingTextOff;
    unsigned short *customChars;
    unsigned int maxCustomChars;
}

- (id)init;
- (void)dealloc;
- (int)colorIndexForTextStyle:(CDAnonymousUnion1)fp8;
- (void)drawViewForPrinting:(BOOL)fp8 controller:(id)fp12 dirtyMap:(char *)fp16 visibleLineRange:(struct _NSRange)fp20 bkgImageOffset:(float)fp28 window:(id)fp32 invertedVideo:(BOOL)fp36;
- (void)setAttributedForLine:(unsigned int)fp8 controller:(id)fp12;
- (void)setStyleRanges;
- (int)styleIndexFromTextStyle:(CDAnonymousUnion1)fp8;

@end

@interface TermEmulator : NSObject
{
    TermController *termController;
    BOOL running;
    unsigned short cursorRow;
    unsigned short cursorColumn;
    unsigned short *iCharacters;
    unsigned int maxICharacters;
    unsigned short textInputRow;
    unsigned short textInputColumn;
    unsigned short realCursorColumn;
    unsigned short cursorLine;
    unsigned short savedCursorRow;
    unsigned short savedCursorColumn;
    BOOL isCursorSaved;
}

- (id)initWithTermController:(id)fp8;
- (void)dealloc;
- (void)hardReset;
- (void)reset;
- (void)resumeWithString:(id)fp8 atCursorRow:(unsigned int)fp12 column:(unsigned int)fp16;
- (void)suspend;
- (void)updateSize;
- (unsigned short)cursorRow;
- (unsigned short)cursorColumn;
- (void)setCursorRow:(int)fp8;
- (void)setCursorColumn:(int)fp8;
- (void)setCursorRow:(int)fp8 column:(int)fp12;
- (BOOL)cursorHidden;
- (BOOL)invertedVideo;
- (unsigned short)textInputRow;
- (unsigned short)textInputColumn;
- (void)setTextInputRow:(int)fp8;
- (void)setTextInputColumn:(int)fp8;
- (void)setTextInputRow:(int)fp8 column:(int)fp12;
- (id)interpretKeyEvent:(id)fp8;
- (unsigned short *)charactersFromString:(id)fp8;
- (void)interpretString:(id)fp8;

@end

@interface InspectorController : NSWindowController
{
    TermController *termController;
    NSPopUpButton *popUpButton;
    NSTabView *tabView;
    BufferInspector *bufferInspector;
    ColorInspector *colorInspector;
    DisplayInspector *displayInspector;
    EmulationInspector *emulationInspector;
    ProcessesInspector *processesInspector;
    ShellInspector *shellInspector;
    WindowInspector *windowInspector;
    KeyMappingInspector *keyMappingInspector;
}

+ (BOOL)loaded;
+ (id)sharedInspectorController;
- (id)init;
- (void)windowDidLoad;
- (BOOL)windowShouldClose:(id)fp8;
- (void)dealloc;
- (void)windowDidBecomeMainNotification:(id)fp8;
- (void)windowDidResignMainNotification:(id)fp8;
- (id)termController;
- (id)bufferInspector;
- (id)colorInspector;
- (id)displayInspector;
- (id)emulationInspector;
- (id)processesInspector;
- (id)shellInspector;
- (id)windowInspector;
- (id)keyMappingInspector;
- (id)currentInspector;
- (void)showInspector:(id)fp8;
- (void)update;
- (void)selectViewFromPopUp:(id)fp8;
- (void)useAsDefaults:(id)fp8;

@end

@interface ProcessesInspector : NSObject
{
    InspectorController *inspectorController;
    NSTableView *runningProcessesTableView;
    NSTableView *cleanCommandsTableView;
    NSButton *removeButton;
    NSMatrix *promptBeforeCloseMatrix;
    NSMutableArray *cleanCommands;
    NSMutableArray *runningProcesses;
}

- (void)dealloc;
- (void)update;
- (void)changed:(id)fp8;
- (void)add:(id)fp8;
- (void)remove:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)tableView:(id)fp8 setObjectValue:(id)fp12 forTableColumn:(id)fp16 row:(int)fp20;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface ShellInspector : NSObject
{
    InspectorController *inspectorController;
    NSTextField *terminalShellTextField;
    NSTextField *ttyTextField;
    NSMatrix *shellExitActionMatrix;
}

- (void)update;
- (void)changed:(id)fp8;

@end

@interface PreferencesController : NSWindowController
{
    NSMatrix *shellMatrix;
    NSTextField *shellTextField;
    NSButton *startupFileCheckBox;
    NSTextField *startupFileTextField;
    NSPopUpButton *terminalTypePopupButton;
}

+ (id)sharedPreferencesController;
- (id)init;
- (void)windowDidLoad;
- (void)showWindow:(id)fp8;
- (BOOL)windowShouldClose:(id)fp8;
- (void)update;
- (void)chooseStartupFile:(id)fp8;
- (void)startupFileCheckBoxChanged:(id)fp8;
- (void)shellChanged:(id)fp8;
- (void)termTypeChanged:(id)fp8;

@end

@interface KeyMappingInspector : NSObject
{
    InspectorController *inspectorController;
    NSTableView *tableView;
    NSButton *metaCheckBox;
    NSWindow *keyMappingSheet;
    NSPopUpButton *keyPopUpButton;
    NSPopUpButton *modifierPopUpButton;
    NSPopUpButton *actionPopUpButton;
    NSTextField *actionTextField;
    NSButtonCell *addButton;
    NSButtonCell *deleteButton;
    NSButtonCell *editButton;
    NSButton *deleteKeySendsBackspaceCheckBox;
    NSMutableArray *boundKeys;
    NSArray *keys;
    NSArray *modifiers;
    NSArray *actions;
}

- (id)init;
- (void)awakeFromNib;
- (void)update;
- (void)changed:(id)fp8;
- (id)localizedDescriptionForBoundKey:(id)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;
- (void)delete:(id)fp8;
- (void)add:(id)fp8;
- (void)sheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)edit:(id)fp8;
- (void)cancelSheet:(id)fp8;
- (void)okSheet:(id)fp8;
- (void)action:(id)fp8;
- (void)tableViewSelectionDidChange:(id)fp8;

@end

@interface TermLine : NSObject
{
    struct _NSRange range;
    CDAnonymousUnion1 textStyle;
    struct _flags flags;
}

- (id)initWithRange:(struct _NSRange)fp8;
- (id)retain;
- (void)release;

@end

@interface ServiceBrowser : NSObject
{
    NSButton *_addService;
    NSButton *_removeService;
    NSButton *_addServer;
    NSButton *_removeServer;
    NSPopUpButton *_options;
    NSComboBox *_connectCommandLine;
    NSTextField *_usernameText;
    NSButton *_connectButton;
    NSBrowser *_serviceBrowser;
    NSWindow *_window;
    NSMutableArray *_servicesToWatch;
    NSArray *_discoveredServers;
    NSMutableArray *_updatedDiscoveredServers;
    NSMutableArray *_permanentServers;
    NSMutableDictionary *_refCountedReferences;
    NSNetServiceBrowser *_currentBrowser;
    NSNetService *_currentResolve;
    NSString *_resolvedAddress;
    int _port;
    struct _DNSServiceRef_t *_currentRef;
    NSWindow *_addServerSheet;
    NSTextField *_newServerAddress;
    NSWindow *_addServiceSheet;
    NSTextField *_newServiceType;
    NSTextField *_newServiceName;
    NSTextField *_newServiceCommand;
    NSButton *_newServiceUsesUser;
}

+ (id)serviceBrowser;
- (id)init;
- (void)connect:(id)fp8;
- (void)addService:(id)fp8;
- (void)removeService:(id)fp8;
- (void)serverSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)serviceSheetDidEnd:(id)fp8 returnCode:(int)fp12 contextInfo:(void *)fp16;
- (void)sheetAddServer:(id)fp8;
- (void)sheetCancelAddServer:(id)fp8;
- (void)sheetAddService:(id)fp8;
- (void)sheetCancelAddService:(id)fp8;
- (void)addServer:(id)fp8;
- (void)removeServer:(id)fp8;
- (void)selectionChange:(id)fp8;
- (void)readFileData:(id)fp8;
- (void)buildCommandLine;
- (void)controlTextDidChange:(id)fp8;
- (void)display;
- (void)addUserDefinedServices;
- (void)writeUserDefinedServices;
- (void)reloadServices;
- (int)_indexOfClosestDiscoveredServer:(id)fp8;
- (int)_indexOfMatchedDiscoveredServer:(id)fp8;
- (void)_updateScrollView;
- (int)browser:(id)fp8 numberOfRowsInColumn:(int)fp12;
- (void)browser:(id)fp8 willDisplayCell:(id)fp12 atRow:(int)fp16 column:(int)fp20;
- (void)netServiceBrowserWillSearch:(id)fp8;
- (void)netServiceBrowser:(id)fp8 didFindService:(id)fp12 moreComing:(BOOL)fp16;
- (void)netServiceBrowser:(id)fp8 didRemoveService:(id)fp12 moreComing:(BOOL)fp16;
- (void)resolvedAddress:(id)fp8 port:(unsigned short)fp12;
- (void)windowWillClose:(id)fp8;

@end

@interface ConnectToService : NSObject
{
    NSString *_userVisibleName;
    NSString *_bonjourName;
    NSDictionary *_commandOptions;
    BOOL _acceptsUsername;
    BOOL _builtIn;
    NSString *_portLocation;
}

+ (id)newWithDictionary:(id)fp8;
- (id)options;
- (id)bonjourName;
- (id)userVisibleName;
- (id)portLocation;
- (BOOL)acceptsUsername;
- (BOOL)builtIn;
- (id)initWithName:(id)fp8 commandOptions:(id)fp12 bonjourName:(id)fp16 usesUser:(BOOL)fp20 portLocation:(id)fp24 builtIn:(BOOL)fp28;
- (void)dealloc;
- (id)dictionaryDescription;

@end

@interface NSNetService (TerminalAdditions)
- (int)compare:(id)fp8;
@end

@interface Pty : NSObject
{
    int p_fd;
    NSConditionLock *p_rlock;
    NSMutableArray *p_rqueue;
    NSConditionLock *p_wlock;
    NSMutableArray *p_wqueue;
    SEL p_readSelector;
    id p_readObject;
    int p_curLen;
    void *p_curStart;
    struct __CFRunLoopSource *p_source;
    struct __CFRunLoop *p_runloop;
    BOOL p_done;
    BOOL p_whold;
}

- (void)_perform;
- (void)_readThread:(id)fp8;
- (void)_writeThread:(id)fp8;
- (void)close;
- (void)dealloc;
- (void)flushWriteQueue;
- (id)initWithDescriptor:(int)fp8 readSelector:(SEL)fp12 forObject:(id)fp16;
- (void)setWriteHold:(BOOL)fp8;
- (void)writeData:(id)fp8;

@end

@interface RawTextField : NSTextField
{
}

- (void)setStringValue:(id)fp8;
- (id)stringValue;

@end

@interface RawTextTableColumn : NSTableColumn
{
}

@end

@interface RawTextView : NSTextView
{
    unsigned short *_buf;
    int _buflen;
    BOOL inPaste;
    BOOL skipShouldChange;
}

- (unsigned short *)_bufferForCharacterInString:(id)fp8 returningLength:(int *)fp12;
- (void)dealloc;
- (id)escapeString:(id)fp8;
- (id)unescapeString:(id)fp8;
- (void)delete:(id)fp8;
- (void)deleteBackward:(id)fp8;
- (void)paste:(id)fp8;
- (BOOL)shouldChangeTextInRange:(struct _NSRange)fp8 replacementString:(id)fp16;
- (void)keyDown:(id)fp8;
- (void)moveLeft:(id)fp8;
- (void)moveRight:(id)fp8;
- (struct _NSRange)selectionRangeForProposedRange:(struct _NSRange)fp8 granularity:(int)fp16;

@end

@interface RawTextPanel : NSPanel
{
}

+ (void)initialize;
- (void)dealloc;
- (id)fieldEditor:(BOOL)fp8 forObject:(id)fp12;

@end

@interface RawTextTableView : NSTableView
{
    id dataSourceProxy;
}

- (id)initWithCoder:(id)fp8;
- (void)dealloc;
- (id)dataSource;
- (void)setDataSource:(id)fp8;

@end

@interface _RawTextDataSourceProxy : NSObject
{
    id dataSource;
}

- (id)initWithDataSource:(id)fp8;
- (void)dealloc;
- (id)__dataSource;
- (void)forwardInvocation:(id)fp8;
- (id)methodSignatureForSelector:(SEL)fp8;
- (int)numberOfRowsInTableView:(id)fp8;
- (BOOL)respondsToSelector:(SEL)fp8;
- (id)tableView:(id)fp8 objectValueForTableColumn:(id)fp12 row:(int)fp16;

@end

@interface Splitter (SplitterAccessibility)
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)taxRoleAttribute;
- (BOOL)taxIsRoleAttributeSettable;
- (id)taxValueAttribute;
- (BOOL)taxIsValueAttributeSettable;
- (void)taxSetValueAttribute:(id)fp8;
- (id)taxMinValueAttribute;
- (BOOL)taxIsMinValueAttributeSettable;
- (id)taxMaxValueAttribute;
- (BOOL)taxIsMaxValueAttributeSettable;
- (id)taxPreviousContentsAttribute;
- (BOOL)taxIsPreviousContentsAttributeSettable;
- (id)taxNextContentsAttribute;
- (BOOL)taxIsNextContentsAttributeSettable;
- (id)taxOrientationAttribute;
- (BOOL)taxIsOrientationAttributeSettable;
- (id)taxParentAttribute;
- (BOOL)taxIsParentAttributeSettable;
- (id)button;
@end

@interface TermSubview (TermSubviewAccessibility)
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)accessibilityParameterizedAttributeNames;
- (id)taxParentAttribute;
- (id)taxRoleAttribute;
- (BOOL)taxIsRoleAttributeSettable;
- (id)taxChildrenAttribute;
- (BOOL)taxIsChildrenAttributeSettable;
- (id)taxValueAttribute;
- (BOOL)taxIsValueAttributeSettable;
- (id)taxSelectedTextAttribute;
- (BOOL)taxIsSelectedTextAttributeSettable;
- (id)taxSelectedTextRangeAttribute;
- (id)taxInsertionPointLineNumberAttribute;
- (BOOL)taxIsInsertionPointLineNumberAttributeSettable;
- (BOOL)taxIsSelectedTextRangeAttributeSettable;
- (id)taxNumberOfCharactersAttribute;
- (BOOL)taxIsNumberOfCharactersAttributeSettable;
- (id)taxVisibleCharacterRangeAttribute;
- (BOOL)taxIsVisibleCharacterRangeAttributeSettable;
- (id)taxDescriptionAttribute;
- (BOOL)taxIsDescriptionAttributeSettable;
- (id)taxFocusedAttribute;
- (BOOL)taxIsFocusedAttributeSettable;
- (void)taxSetFocusedAttribute:(id)fp8;
- (id)taxSizeAttribute;
- (BOOL)taxIsSizeAttributeSettable;
- (id)taxPositionAttribute;
- (BOOL)taxIsPositionAttributeSettable;
- (id)taxLineForIndexAttributeForParameter:(id)fp8;
- (id)taxRangeForLineAttributeForParameter:(id)fp8;
- (id)taxStringForRangeAttributeForParameter:(id)fp8;
- (id)taxRangeForPositionAttributeForParameter:(id)fp8;
- (id)taxRangeForIndexAttributeForParameter:(id)fp8;
- (id)taxBoundsForRangeAttributeForParameter:(id)fp8;
- (void)keyboardSelection:(id)fp8;
- (void)endKeyboardSelection:(id)fp8;
- (void)_keySelMoveRelativeX:(int)fp8 Y:(int)fp12;
- (BOOL)_keySelKeyDown:(id)fp8;
- (void)scrollerTrackingWillBegin:(id)fp8;
- (void)scrollerTrackingDidEnd:(id)fp8;
@end

@interface ScrollSubview (ScrollSubviewAccessibility)
- (id)taxParentAttribute;
- (id)taxFocusedAttribute;
@end

@interface AccessibleView : NSView
{
}

- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8 forParameter:(id)fp12;
- (BOOL)accessibilityIsAttributeSettable:(id)fp8;
- (void)accessibilitySetValue:(id)fp8 forAttribute:(id)fp12;

@end

@interface TermStorage (TermStorageAccessibility)
- (id)lineBuffer;
- (int)keySelMode;
- (void)setKeySelMode:(int)fp8;
- (BOOL)selEnd;
@end

@interface TermController (TermControllerAccessibility)
- (id)splitter;
@end

@interface TermFakeScrollView : NSObject
{
    NSView *contentView;
    NSView *parent;
    NSScroller *verticalScroller;
}

- (id)initWithScroller:(id)fp8 contentView:(id)fp12 parent:(id)fp16;
- (id)accessibilityAttributeValue:(id)fp8;
- (id)accessibilityAttributeValue:(id)fp8 forParameter:(id)fp12;
- (BOOL)accessibilityIsAttributeSettable:(id)fp8;
- (void)accessibilitySetValue:(id)fp8 forAttribute:(id)fp12;
- (id)accessibilityParameterizedAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)taxRoleAttribute;
- (BOOL)taxIsRoleAttributeSettable;
- (id)taxRoleDescriptionAttribute;
- (BOOL)taxIsRoleDescriptionAttributeSettable;
- (id)taxHorizontalScrollBarAttribute;
- (BOOL)taxIsHorizontalScrollBarAttributeSettable;
- (id)taxVerticalScrollBarAttribute;
- (BOOL)taxIsVerticalScrollBarAttributeSettable;
- (id)taxParentAttribute;
- (BOOL)taxIsParentAttributeSettable;
- (id)taxContentsAttribute;
- (BOOL)taxIsContentsAttributeSettable;
- (id)taxChildrenAttribute;
- (BOOL)taxIsChildrenAttributeSettable;
- (id)taxWindowAttribute;
- (BOOL)taxIsWindowAttributeSettable;
- (struct _NSRect)_taxRectHelperForView:(id)fp8;
- (struct _NSRect)_taxRectHelper;
- (id)taxPositionAttribute;
- (BOOL)taxIsPositionAttributeSettable;
- (id)taxSizeAttribute;
- (BOOL)taxIsSizeAttributeSettable;
- (id)taxFocusedAttribute;
- (BOOL)taxIsFocusedAttributeSettable;
- (void)taxSetFocusedAttribute:(id)fp8;
- (id)taxTopLevelUIElementAttribute;
- (BOOL)taxIsTopLevelUIElementAttributeSettable;

@end

@interface TermView (TermViewAccessibility)
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)taxRoleAttribute;
- (id)taxSplittersAttribute;
- (BOOL)taxIsSplittersAttributeSettable;
- (void)_taxFakeScrollViewHelper;
- (id)taxChildrenAttribute;
- (void)taxSplitterDidChange:(BOOL)fp8;
- (id)mainFakeScrollView;
- (id)scrollFakeScrollView;
@end

@interface TermEmulator (TermEmulatorAccessibility)
- (void)saveCursorPosition;
- (void)restoreCursorPosition;
- (BOOL)isCursorSaved;
- (void)setCursorLine:(int)fp8;
- (unsigned short)cursorLine;
- (void)setRealCursorColumn:(int)fp8;
- (unsigned short)realCursorColumn;
@end

@interface AccessibleContentView : AccessibleView
{
    TermView *termView;
}

- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeNames;
- (id)taxChildrenAttribute;

@end

@interface TermScroller : NSScroller
{
}

- (void)trackKnob:(id)fp8;
- (void)trackScrollButtons:(id)fp8;

@end

